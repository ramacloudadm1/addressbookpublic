// Gradle Configuration File
// For more details take a look at the Java Quickstart chapter in the Gradle
// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html

import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id 'java'
    id 'jacoco'
    id 'checkstyle'
    id 'com.github.kt3k.coveralls' version '2.4.0'
    id 'com.github.johnrengelman.shadow' version '2.0.3'
    id 'org.asciidoctor.convert' version '1.5.6'
    id 'application'
}

mainClassName = 'AB.Main'

sourceCompatibility = JavaVersion.VERSION_1_9
targetCompatibility = JavaVersion.VERSION_1_9

repositories {
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
}

sourceSets {
    main {
        java {
            srcDirs = ['src']
        }
        resources {
            srcDirs = ['src']
        }
    }
    test {
        java {
            srcDirs = ['test/java']
        }
    }
}

checkstyle {
    toolVersion = '8.1'
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

test {
    useJUnitPlatform()
}

dependencies {
    String testFxVersion = '4.0.12-alpha'
    String jUnitVersion = '5.1.0'

    implementation group: 'org.controlsfx', name: 'controlsfx', version: '8.40.11'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.7.0'
    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.7.4'
    implementation group: 'com.google.guava', name: 'guava', version: '19.0'
    implementation group: 'javax.xml.bind', name: 'jaxb-api', version: '2.2.8'
    implementation group: 'com.sun.xml.bind', name: 'jaxb-impl', version: '2.3.0'
    implementation group: 'com.sun.xml.bind', name: 'jaxb-core', version: '2.3.0'
    implementation group: 'javax.activation', name: 'activation', version: '1.1.1'

    testImplementation group: 'junit', name: 'junit', version: '4.12'
    testImplementation group: 'org.testfx', name: 'testfx-core', version: testFxVersion, {
        exclude group: 'org.testfx', module: 'testfx-internal-java8'
    }
    testImplementation group: 'org.testfx', name: 'testfx-junit', version: testFxVersion

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: jUnitVersion

    testRuntimeOnly group: 'org.testfx', name: 'testfx-internal-java9', version: testFxVersion
    testRuntimeOnly group: 'org.testfx', name: 'openjfx-monocle', version: 'jdk-9+181'
    testRuntimeOnly group:'org.junit.vintage', name:'junit-vintage-engine', version: jUnitVersion
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: jUnitVersion
}

shadowJar {
    archiveName = 'AB.jar'

    destinationDir = file("${buildDir}/jar/")
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.8.1'
}

task coverage(type: JacocoReport) {
    sourceDirectories = files(sourceSets.main.allSource.srcDirs)
    classDirectories =  files(sourceSets.main.output)
    executionData = files(jacocoTestReport.executionData)
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/*.jar'])
        })
    }
    reports {
        html.enabled = true
        xml.enabled = true
    }
}

coveralls {
    sourceDirs = sourceSets.main.allSource.srcDirs.absolutePath
    jacocoReportPath = "${buildDir}/reports/jacoco/coverage/coverage.xml"
}

tasks.coveralls {
    dependsOn coverage
    onlyIf { System.env.'CI' }
}

test {
    testLogging {
        events TestLogEvent.FAILED, TestLogEvent.SKIPPED

        // Prints the currently running test's name in the CI's build log,
        // so that we can check if tests are being silently skipped or
        // stalling the build.
        if (System.env.'CI') {
            events << TestLogEvent.STARTED
        }
    }
}

asciidoctor {
    backends 'html5'
    sourceDir 'docs'
    outputDir "${buildDir}/docs"

    options = [
        template_dirs: [file("${sourceDir}/templates")],
    ]

    attributes = [
        linkcss: true,
        stylesheet: 'gh-pages.css',
        'source-highlighter': 'coderay',
        icons: 'font',
        experimental: true,
        sectlinks: true,
        idprefix: '',  // for compatibility with GitHub preview
        idseparator: '-',
        'site-root': "${sourceDir}",  // must be the same as sourceDir, do not modify
        'site-name': 'AB3',
        'site-githuburl': 'https://github.com/cs2113-ay1819s2-t08-2/main',
    ]

    options['template_dirs'].each {
        inputs.files fileTree(it)
    }
}

// Copies stylesheets into the directory containing generated HTML files as
// Asciidoctor does not copy linked CSS files to the output directory when rendering.
// This is needed for linked stylesheets and embedded stylesheets which import other files.
task copyStylesheets(type: Copy) {
    from "${asciidoctor.sourceDir}/stylesheets"
    into "${asciidoctor.outputDir}/html5/stylesheets"
}
asciidoctor.dependsOn copyStylesheets

defaultTasks 'clean', 'test', 'asciidoctor', 'checkstyleMain', 'checkstyleTest'
